AWSTemplateFormatVersion: '2010-09-09'
Description: "static website with Amazon S3 and CloudFront"

##  ==================== PARAMETERS ====================  ##

Parameters:
  # WebsiteDomainName:
  #   Type: String
  #   Description: "The domain name for your website (e.g., example.com)"
  IndexDocument:
    Type: String
    Description: "name of applicaion file"
    Default: "index.html"
  S3BucketName:
    Type: String
    Description: "The name for the S3 bucket to host your website"
    # Default: !Sub "${WebsiteDomainName}-website-bucket"
    Default: "static-website-bucket-1"

  paramRootDomain:
    Description: Specify a root domain for your website (such as example.com)
    Type: String  

  paramUniqueTagName:
    Description: Specify a unique name for tag
    Type: String
    Default: static-website-hosting-to-s3
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Must contain only ASCII characters

##  ==================== MAPPINGS ====================  ##
Mappings:
  RegionMap:
    us-east-1:
      S3HostedZoneId: Z3AQBSTGFYJSTF
    us-west-1:
      S3HostedZoneId: Z2F56UZL2M1ACD
    us-west-2:
      S3HostedZoneId: Z3BJ6K6RIION7M
    eu-central-1:
      S3HostedZoneId: Z21DNDUVLTQW6Q
    eu-west-1:
      S3HostedZoneId: Z1BKCTXD74EZPE
    ap-southeast-1:
      S3HostedZoneId: Z3O0J2DXBE1FTB
    ap-southeast-2:
      S3HostedZoneId: Z1WCIGYICN2BYD
    ap-northeast-1:
      S3HostedZoneId: Z2M4EHUR26P7ZW
    sa-east-1:
      S3HostedZoneId: Z31GFT0UA1I2HV

##  ==================== RESOURSES ====================  ##

Resources:
  myS3BucketForRootdomain:
    # Condition: HasSubdomainName 
    Type: 'AWS::S3::Bucket'
    # DeletionPolicy: Retain 
    Properties:
      BucketName: !Ref S3BucketName 
      WebsiteConfiguration:
        IndexDocument: index.html
        # ErrorDocument: error.html
      VersioningConfiguration:
        Status: Enabled
      AccessControl: BucketOwnerFullControl

  ## We need to give a public read access to S3 bucket objects 
  myPolicyForS3BucketForRootDomain:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref myS3BucketForRootDomain
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub "${myS3BucketForRootDomain.Arn}/*"

  myRoute53HostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig: 
        Comment: !Sub My public hosted zone for ${paramRootDomain}
      Name: !Ref paramRootDomain
      HostedZoneTags: 
        - Key: mastering-cloudformation
          Value: !Ref paramUniqueTagName

  myRoute53RecordSetGroup:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      Comment: Route53 record for CloudFront distributions for root domain and subdomain
      HostedZoneId: !Ref myRoute53HostedZone
      RecordSets:
        - Name: !Ref paramRootDomain  
          Type: A 
          AliasTarget:
              DNSName: !Sub s3-website-${AWS::Region}.amazonaws.com
              HostedZoneId: !FindInMap 
                - RegionMap            
                - !Ref 'AWS::Region'
                - S3HostedZoneId
         
  mySSLCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref paramRootDomain
      SubjectAlternativeNames:
        - !Sub '*.${paramRootDomain}' 
      DomainValidationOptions:
        - DomainName: !Ref paramRootDomain 
          HostedZoneId: !Ref paramHostedZoneId
      ValidationMethod: DNS  
      Tags:
        - Key: mastering-cloudformation
          Value: !Ref paramUniqueTagName

  myCloudFrontOAI:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'OAI for S3 origins'  

  #Create CloudFront distribution for subdomain that contains static website
  myCloudFrontDistributionForRootdomain:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: CloudFront distribution points to S3 bucket for subdomain
        Origins: 
          - DomainName: !Sub '${paramRootDomain}.s3.${AWS::Region}.amazonaws.com' 
            Id:  !Sub 'S3Origin-${paramRootDomain}' 
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${myCloudFrontOAI}'

        Aliases: 
          - !Ref $paramRootDomain
        CustomErrorResponses:
          - ErrorCode: 403 
            ResponseCode: 404 
            ResponsePagePath: '/error.html'
            ErrorCachingMinTTL: 60 
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds, 1 hour
          MaxTTL: 86400 # in seconds, 24 hours
          MinTTL: 60 # in seconds, 1 min
          TargetOriginId: !Ref 'S3Origin-${paramRootDomain}'
          ViewerProtocolPolicy: 'redirect-to-https' 
        DefaultRootObject: 'index.html' 
        Enabled: true 
        HttpVersion: http2 
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref mySSLCertificate
          SslSupportMethod: sni-only

  #The following piece of code helps to create a policy for S3 bucket for subdomain:
  myPolicyForS3BucketForRootdomain:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref $paramRootDomain
      PolicyDocument:
        Statement:
        - Action: 's3:GetObject'
          Effect: Allow
          Resource: !Ref 'arn:aws:s3:::${paramRootDomain}/*'
          Principal:
            CanonicalUser: !GetAtt myCloudFrontOAI.S3CanonicalUserId
        # deny access for non SSL access to S3 bucket
        - Sid: AllowSSLRequestsOnly 
          Effect: Deny
          Principal: '*'
          Action: 's3:*'
          Resource: !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref $paramRootDomain
              - /*
          Condition:
            Bool:
              'aws:SecureTransport': false
                
Outputs:
  outputS3WebsiteURLForSubomain:
    Condition: HasSubdomainName
    Description: Amazon S3 website endpoint for subdomain
    Value: !GetAtt myS3BucketForSubdomain.WebsiteURL
  outputRoute53HostedZoneId:
    Description: Public hosted zone ID (such as Z23ABC4XYZL05B)
    Value: !GetAtt myRoute53HostedZone.Id # the same as !Ref myRoute53HostedZone  
  outputRoute53HostedZoneNameServers:
    Description: List of name servers for newly created public hosted zone
    Value: !Join [', ', !GetAtt myRoute53HostedZone.NameServers] 
  outputWebsiteURLForRootDomain:
    Description: Website url for root domain
    Value: !Sub 'http://${paramRootDomain}/'
  outputWebsiteURLForSubomain:
    Condition: HasSubdomainName 
    Description: Website url for subdomain
    Value: !Sub 'http://${paramSubdomain}.${paramRootDomain}/'
  outputS3WebsiteURLForSubdomain:
    Description: Amazon S3 website endpoint for subdomain
    Value: !GetAtt myS3BucketForSubdomain.WebsiteURL
  outputS3RegionalDomainNameForSubdomain:
    Description:  Regional domain name of S3 bucket for subdomain
    Value: !GetAtt myS3BucketForSubdomain.RegionalDomainName    
  outputCertificateArn:
    Description: Issued SSL certificate Arn
    Value: !Ref mySSLCertificate
  outputCloudFrontDistributionForRootDomainId:
    Description: CloudFront distribution ID for root domain
    Value: !Ref myCloudFrontDistributionForRootDomain
  outputCloudFrontDistributionDomainNameForRootDomain:
    Description: CloudFront distribution domain name for root domain
    Value: !GetAtt myCloudFrontDistributionForRootDomain.DomainName  