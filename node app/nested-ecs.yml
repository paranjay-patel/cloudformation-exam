---
AWSTemplateFormatVersion: '2010-09-09'
Description: The template used to create an ECS Service from the ECS Console.
Parameters:
  ECSClusterName:
    Type: String
    Default: ecs-tutorial
  ECSServiceName:
    Type: String
    Default: ecs-tutorial-td
  # SecurityGroupIDs:
  #   Type: CommaDelimitedList
  #   Default: sg-0323e1a844692ded8
  # SubnetIDs:
  #   Type: CommaDelimitedList
  #   Default: subnet-028f746d2c69f960d,subnet-0f3b24e256e3c04de,subnet-0c0e91b679a30f5b8,subnet-0b63f552939ebe4bf,subnet-0b3479d8927145b41,subnet-0f39e093711f7ebf5
  # VpcID:
  #   Type: String
  #   Default: vpc-0f4d898a38fd3cb9c
  LoadBalancerName:
    Type: String
    Default: ecs-tutorial-lb
  # ParameterStoreUser:
  #   Type: String
  #   Default: logicwind
  # ParameterStorePassword:
  #   Type: String
  #   Default: logicwind

Resources:
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: ecs-tutorial
      CapacityProviderStrategy:
      - CapacityProvider: FARGATE
        Base: 0
        Weight: 1
      TaskDefinition: !Ref TaskDefinition #arn:aws:ecs:us-east-1:818971154557:task-definition/ecs-tutorial-td:1
      ServiceName: ecs-tutorial-td
      # SchedulingStrategy: REPLICA
      DesiredCount: 2
      LoadBalancers:
      - ContainerName: tindog
        ContainerPort: 80
        LoadBalancerName:
          Ref: AWS::NoValue
        TargetGroupArn:
          Ref: TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: !Split [",", !ImportValue ECSSecurityGroup]
          Subnets:
            - !ImportValue PublicSubnet1Id
            - !ImportValue PublicSubnet2Id
            - !ImportValue PrivateSubnet1Id
            - !ImportValue PrivateSubnet2Id
      # PlatformVersion: LATEST
      # DeploymentConfiguration:
      #   MaximumPercent: 200
      #   MinimumHealthyPercent: 100
      #   DeploymentCircuitBreaker:
      #     Enable: true
      #     Rollback: true
      DeploymentController:
        Type: ECS
      # ServiceConnectConfiguration:
      #   Enabled: false
      # Tags: []
      # EnableECSManagedTags: true
    DependsOn:
    - Listener

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: tindog-website-family
      Cpu: 512 #0.5cpu
      Memory: 1024  #1gb
      NetworkMode: awsvpc
      # ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: tindog
          Image: paranjay1/tindog:latest
          PortMappings:
            - ContainerPort: 80
          Environment:
            # - Name: entryPoint
            #   Value: 'sh, -c'
            # - Name: command
            #   Value: >-
            #     /bin/sh -c \"echo '<html> <head> <title>Amazon ECS Sample
            #     App</title> <style>body {margin-top: 40px; background-color:
            #     #333;} </style> </head><body> <div
            #     style=color:white;text-align:center> <h1>Amazon ECS Sample
            #     App</h1> <h2>Congratulations!</h2> <p>Your application is now
            #     running on a container in Amazon ECS.</p> </div></body></html>'
            #     >  /usr/local/apache2/htdocs/index.html && httpd-foreground\"
          # EnvironmentFiles: []
          # LogConfiguration:
          #   LogDriver: awslogs
          #   Options:
          #     awslogs-region: !Ref AWS::Region
          #     awslogs-group: !Ref LogGroup
          #     awslogs-stream-prefix: ecs

      RequiresCompatibilities:
        - EC2
        - FARGATE

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: ecs-tutorial-lb
      SecurityGroups: !Split [",", !ImportValue ECSSecurityGroup]
      Subnets:
        - !ImportValue PublicSubnet1Id
        - !ImportValue PublicSubnet2Id
        # - !ImportValue PrivateSubnet1Id
        # - !ImportValue PrivateSubnet2Id   #load balancer can not attched to private subnet

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: "/"
      Name: ecs-tutorial-target-group
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !ImportValue VPCID
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '300'

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP

  # ParameterStore1:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Type: String
  #     Name: username
  #     Value: !Ref ParameterStoreUser

  # ParameterStore2:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Type: String
  #     Name: password
  #     Value: !Ref ParameterStorePassword

Outputs:
  ClusterName:
    Description: The cluster used to create the service.
    Value:
      Ref: ECSClusterName
  ECSService:
    Description: The created service.
    Value:
      Ref: ECSService
  LoadBalancer:
    Description: The created load balancer.
    Value:
      Ref: LoadBalancer
  Listener:
    Description: The created listener.
    Value:
      Ref: Listener
  TargetGroup:
    Description: The created target group.
    Value:
      Ref: TargetGroup
  LoadBalancerDNSName:
    Description: The DNS name of the load balancer.
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: LoadBalancerDNSName

