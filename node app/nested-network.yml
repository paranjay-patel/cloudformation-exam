AWSTemplateFormatVersion: '2010-09-09'
Description: vpc , 2 private and 2 public subnet, 3 route tables, 1 internet gateway

Parameters:
  VpcCIDRBlock:
    Description: CIDR block for the VPC
    Default: 10.0.0.0/16
    Type: String

  PublicSubnet1CidrBlock:
    Description: CIDR block for the public subnet 1
    Default: 10.0.1.0/24
    Type: String
  PublicSubnet2CidrBlock:
    Description: CIDR block for the public subnet 2
    Default: 10.0.2.0/24
    Type: String
  PrivateSubnet1CidrBlock:
    Description: CIDR block for the private subnet 1
    Default: 10.0.3.0/24
    Type: String
  PrivateSubnet2CidrBlock:
    Description: CIDR block for the private subnet 2
    Default: 10.0.4.0/24
    Type: String

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  InternetGateway:  
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1CidrBlock
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet2CidrBlock
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: server security group
      GroupDescription: security group for rds ec2 instance
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      # SecurityGroupEgress:
      #   - Security Group Rule
      # Tags:
      #   - Key:
      #     Value:

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref MyVPC
    Export:
      # Name: !Sub "${AWS::StackName}-VpcId"
      Name: VPCID

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      # Name: !Sub "${AWS::StackName}-PublicSubnet1Id"
      Name: PublicSubnet1Id

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      # Name: !Sub "${AWS::StackName}-PublicSubnet2Id"
      Name: PublicSubnet2Id

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      # Name: !Sub "${AWS::StackName}-DBSubnetId"
      Name: PrivateSubnet1Id

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: PrivateSubnet2Id
      # Name: !Sub "${AWS::StackName}-PrivateSubnet2Id"

  SecurityGroup:
    Description: Security group id for server
    Value: !Ref SecurityGroup
    Export: 
      # Name: !Sub "${AWS::StackName}-SecurityGroup"
      Name: ECSSecurityGroup

  SecurityGroupArray:
    Description: Security group id for server
    # Value: !Ref SecurityGroupDBSubnet2
    Value : !Join [",", [!GetAtt SecurityGroup.GroupId]] #The !Join function concatenates the security group IDs into a single string, separated by commas.
    Export: 
      # Name: !Sub "${AWS::StackName}-SecurityGroup"
      Name: ECSSecurityGroupArray
  
  SubnetIdArray:
    Description: Security group id for server
    Value:
      Fn::Join:
        - ","
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
    Export: 
      # Name: !Sub "${AWS::StackName}-SecurityGroup"
      Name: SubnetIdArray

# Outputs:
#   LocalLambdaExecRole:
#     Description: Lambda Execution Role
#     Value: !GetAtt LocalLambdaExecRole.Arn
#     Export:
#       Name: !Sub "${AWS::StackName}-LocalLambdaExecRole"


#  Role: !ImportValue LocalLambdaExecRole
